<?php

/**
 * @file
 * General functions relating to this module.
 * This file will not include the searches themselves.
 */
require_once 'includes/KPSEARCH.inc';

require_once 'includes/GeneticMarkerSearch.inc';

require_once 'includes/GermplasmSearch.inc';
require_once 'includes/BreedingCrossSearch.inc';
require_once 'includes/CultivarSearch.inc';
require_once 'includes/RILSearch.inc';

require_once 'includes/GeneticMapSearch.inc';

 /**
  * Implement hook_chado_custom_search().
  *
  * This hook simply lists the machine name of the searches so that we can find
  * the info hook. We've done this for performance reasons.
  */
 function kp_searches_chado_custom_search() {
   $searches = [];

   // EXAMPLE: $searches['BreedingCrossSearch'] = 'Breeding Cross Search';
   $searches['GeneticMarkerSearch'] = 'Genetic Marker Search';

   $searches['GermplasmSearch'] = 'Germplasm Search';
   $searches['BreedingCrossSearch'] = 'Breeding Cross Search';
   $searches['CultivarSearch'] = 'Cultivar Search';
   $searches['RILSearch'] = 'Recombinant Inbred Line (RIL) Search';

   $searches['GeneticMapSearch'] = 'Genetic Map Search';

   return $searches;
 }

/**
 * Implements hook_menu().
 */
function kp_searches_menu() {
  $items = [];

  $items['search/germplasm/autocomplete.json/%/%/%'] = array(
    'page callback' => 'autocomplete_kp_searches_germplasm_name',
    'page arguments' => array(3,4,5),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Save options used in search form using variable_get/set().
 */
function kp_searches_cache_options() {

  // Crops.
  //-------------------------
  // These are hard-coded since we do not want the full list of organisms.
  $crop_options = [
    'Cicer' => [
      'title' => 'Chickpea',
      'genus' => 'Cicer',
      'crop-species' => 'arietinum',
      'image' => '/sites/all/modules/custom/kp_frontpage/images/kphome/crops-chickpea.jpg',
    ],
    'Lens' => [
      'title' => 'Lentil',
      'genus' => 'Lens',
      'crop-species' => 'culinaris',
      'image' => '/sites/all/modules/custom/kp_frontpage/images/kphome/crops-cultivated-lentil.jpg',
    ],
    'Phaseolus' => [
      'title' => 'Dry Bean',
      'genus' => 'Phaseolus',
      'crop-species' => 'vulgaris',
      'image' => '/sites/all/modules/custom/kp_frontpage/images/kphome/crops-dry-bean.jpg',
    ],
    'Vicia' => [
      'title' => 'Faba Bean',
      'genus' => 'Vicia',
      'crop-species' => 'faba',
      'image' => '/sites/all/modules/custom/kp_frontpage/images/kphome/crops-faba-bean.jpg',
    ],
    'Pisum' => [
      'title' => 'Field Pea',
      'genus' => 'Pisum',
      'crop-species' => 'sativum',
      'image' => '/sites/all/modules/custom/kp_frontpage/images/kphome/crops-pea.jpg',
    ],
  ];
  // Now add in the rest of the species.
  $sql = 'SELECT genus, species FROM {organism} ORDER BY genus, species';
  $resource = chado_query($sql);
  foreach ($resource as $r) {
    if (isset($crop_options[ $r->genus ])) {
      $crop_options[ $r->genus ]['species'][ $r->species ] = $r->species;
    }
  }
  variable_set('kp_searches_crop_options', serialize($crop_options));

  // Germplasm Types.
  //-------------------------
  $options = db_query("SELECT cb.type_id, tb.label
    FROM chado_bundle cb
    LEFT JOIN tripal_bundle tb ON tb.id=cb.bundle_id
    WHERE cb.data_table = 'stock'")->fetchAllKeyed(0,1);
  variable_set('kp_searches_germplasm_type_options', serialize($options));

  //-------------------------
  // Genetic Marker Types.
  // We want ot use ND Genotypes list but that is broken down into partition.
  // Thus we are first going to get a list of all partitions and then merge
  // each list. We are going this route b/c it's non-trivial to determine which
  // type featureprops are for markers and which are for variants.
  // -- Retrieve a list of all partitions.
  $query = "WITH RECURSIVE t AS (
      (SELECT partition
        FROM {mview_ndg_germplasm_genotyped}
        ORDER BY partition
        LIMIT 1)
      UNION ALL
      SELECT
          (SELECT partition
            FROM {mview_ndg_germplasm_genotyped}
            WHERE partition > t.partition
            ORDER BY partition
            LIMIT 1)
        FROM t
        WHERE t.partition IS NOT NULL
    )
    SELECT t.partition FROM t WHERE t.partition IS NOT NULL";
  $partitions = chado_query($query)->fetchCol();
  // -- Retieve marker type options for all partitions.
  $marker_types = [];
  foreach ($partitions as $partition_name) {
    $curr_partition_types = variable_get(
      'nd_genotypes_'.$partition_name.'_marker_types',
      'a:0{}'
    );
    if (!empty($curr_partition_types)) {
      $marker_types = array_merge($marker_types, unserialize($curr_partition_types));
    }
  }
  // -- Finally, Save the options!
  variable_set('kp_searches_marker_types', serialize($marker_types));

}

/**
 * AUTOCOMPLETE: Germplasm Names respecting access of the user.
 */
function autocomplete_kp_searches_germplasm_name($genus, $type_id = 'all', $keyword = '') {
  global $user;

  $where = [
      '(s.name~*:keyword OR s.uniquename~*:keyword)',
      'o.genus = :genus'];
  $args = [':genus' => $genus, ':keyword' => $keyword];

  // Restrict by type (if supplied).
  if (is_numeric($type_id)) {
    $where[] = 's.type_id = :type_id';
    $args[':type_id'] = $type_id;
  }

  // Retrict by access.
  // Only use access control for non administrators. This is put in place to
  // allow administrators to see content "on the cutting room floor"
  // (i.e. not of any given type).
  $administrator = array_search('administrator', $user->roles);
  if (!$administrator) {
    // See https://github.com/tripal/tripal/blob/7.x-3.x/tripal/includes/tripal.entity.inc#L495
    $entity_types = db_query("SELECT cb.type_id, cb.bundle_id FROM chado_bundle cb
      WHERE cb.data_table = 'stock'")->fetchAllKeyed(0,1);
    // Only includes bundles the current user has access to.
    $available_types = [];
    foreach($entity_types as $type_id => $bundle_id) {
      $bundle_name = 'bio_data_' . $bundle_id;
      if (user_access('view ' . $bundle_name)) {
        $available_types[] = $type_id;
      }
    }
    $where[] = 's.type_id IN (:access_type_ids)';
    $args[':access_type_ids'] = $available_types;
  }

  $results = chado_query('SELECT s.name
    FROM {stock} s
    LEFT JOIN {organism} o ON o.organism_id=s.organism_id
    WHERE ' . implode(' AND ', $where)
    . ' LIMIT 10',
    $args)->fetchAllKeyed(0,0);

  // Return the results.
  drupal_json_output($results);
}
